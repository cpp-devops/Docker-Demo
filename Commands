Service docker status 
Service docker stop 
Service docker start 
Service docker restart 
docker pull tomcat (latest) 
docker pull tomcat:jdk11-openjdk-slim (specific tag) 
docker image ls ( list images) 
docker pull dockerdemo20/ubuntu_v1
Docker pull nginx 
Docker pull httpd 
docker run –d –P tomcat:latest (detached Mode) 
docker run --name chandranginx  -d –P tomcat  ( setting customized name )
docker ps  ( to check running containers) 
docker ps -a ( list stopped & running containers )  
Docker run –it centos /bin/bash   ( it will run container and go inside and land on bash terminal) 
Ctrl pq  (graceful exit from container) 
docker run –itd centos ( as centos need a process to run, this will run process inside and detached )
Docker stop containerID
Docker start containerID
Docker restart containerID
Docker rm containerID ( Remove container)
Docker rm containerID ( running container can’t be removed)
Docker rm -f containerID (Remove all – running as well) 
Docker rm -f containerID1 containerID2 (removing multiple container) 
Docker ps –aq (List containerIDs) 
Docker rm –f ‘docker ps -aq’  (Remove all container in one go………) 
Docker run –d –p 9080:80 nginx   (exposing customized port) 
Docker exec –it containerID /bin/bash  (getting inside into running container) 
docker exec containerID touch test.txt  ( running command inside container without getting into it) 
Docker exec containerID ls –l /root 
===================================Build Own Images - There are 2 ways =================================
Manual Process ( docker commit) 
Automated process (Dockerfile … docker build ) 
Manual Process============ Need base image and build on that 
Docker pull ubuntu
Note: we can’t make changes in image directly hence run it as container and make the changes
Docker run –it ubuntu /bin/bash  ( run container in interactive mode) 
	apt-get update 
	touch text.txt (assumining no vi editor) 
	vi text.txt 
	apt-get install –y vim
	ctrl pq 
Docker ps 
Docker commit –m “making image” containerID NewImageName  ( convert container to image ) 
============================================= Build Image Automatically ============
Dockerfile (instructions in a file) 
Touch dockerfile 
	FROM ubuntu:18.04		
	RUN apt-get update
	RUN touch text.txt
	RUN echo “This my image created automatically” >>text.txt
	RUN apt-get install –y vim 
	
Save the file. 
Docker build –f dockerfile  -t newimagename:v2 .     (dir path “.” means current) 
---
(docker directives) 
FROM (which image you like to pull) and runs as container in interactive mode
RUN (instructing which command to run) 
https://docs.docker.com/develop/develop-images/dockerfile_best-practices/
======================================
what is Dockefile:
==================
A Dockerfile is set of instructions which are used to construct a Docker Image.
These instructions are called directives.

Dockerfiel directive:
=====================

FROM: start a new build stage and sets the base image. usually must be the first directive in the Dockerfile (except ARG can be placed before FROM).

ENV: set environment variables. These can be refefenced in the Dockerfile itself and are visible to the container at runtime. 

RUN: creates a new layer on top of the previous layer by running a command inside that new layer and commiting the changes.

CMD: specify a default command used to run a container at execution time.

EXPOSE: documents which port(s) are intended to published when running a container

WORKDIR: sets the current working directory for subsequent directives such as ADD, COPY, CMD, ENTRYPOINT, etc. Cna be used multiple time to change the directories throught the Dockerfile. you can also use relative path, which sets the new working direcotry relative to the previous working direcotry.
 
COPY: copy files from the local machine to the image. 

ADD: similar to COPY, but can also pull files using a URL and extract an archive into loose files in the image. 

STOPSIGNAL: specify the signal that will be used to stop the container. 

HEALTHCHECK: speciry a command to run in order to perform a custom health check to verify that the container is working properly.

=================================


Docker build –f dockerfile  -t newimagename:v2 .     (dir path “.” means context to current) ]

============Push image to docker hub============

Create account on docker hub
Create Public Repository
Docker login
Docker image ls
Docker tag myimage:v1 myacc/myimage:v1 ( creating alias) 
Docker push hub.docker.com/dockerdemo20 /myimage:v1
Docker push dockerdemo20 /myimage:v1












 



 






